% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/JointAnalysis.R
\name{clusteringFromDistance}
\alias{clusteringFromDistance}
\title{clusteringFromDistance}
\usage{
clusteringFromDistance(
  object,
  assay = "All",
  resolution = c(0.6, 0.6, 0.6),
  graph.k.param = 20,
  graph.compute.SNN = TRUE,
  graph.prune.SNN = 1/15,
  graph.nn.eps = 0,
  graph.force.recalc = FALSE,
  cluster.modularity.fxn = 1,
  cluster.initial.membership = NULL,
  cluster.node.sizes = NULL,
  cluster.algorithm = 1,
  cluster.n.start = 10,
  cluster.n.iter = 10,
  cluster.random.seed = 0,
  cluster.group.singletons = TRUE,
  cluster.temp.file.location = NULL,
  cluster.edge.file.name = NULL
)
}
\arguments{
\item{object}{Seurat object}

\item{assay}{run UMAP for which assay, choose from RNA, ADT, Joint or All}

\item{resolution}{resolution for 1) Joint, 2) RNA and 3) ADT clustering. if assay = All, user should provide all three solutions. otherwise user only need to provide one resolution for selected assay.}

\item{graph.k.param}{parameter for Seurat function FindNeighbors. Defines k for the k-nearest neighbor algorithm}

\item{graph.compute.SNN}{parameter for Seurat function FindNeighbors. also compute the shared nearest neighbor graph}

\item{graph.prune.SNN}{parameter for Seurat function FindNeighbors. Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the SNN construction. Any edges with values less than or equal to this will be set to 0 and removed from the SNN graph. Essentially sets the strigency of pruning (0 — no pruning, 1 — prune everything).}

\item{graph.nn.eps}{parameter for Seurat function FindNeighbors. Error bound when performing nearest neighbor seach using RANN; default of 0.0 implies exact nearest neighbor search}

\item{graph.force.recalc}{parameter for Seurat function FindNeighbors. Force recalculation of SNN.}

\item{cluster.modularity.fxn}{parameter for Seurat function FindClusters.Modularity function (1 = standard; 2 = alternative).}

\item{cluster.initial.membership}{parameter for Seurat function FindClusters.Parameters to pass to the Python leidenalg function.}

\item{cluster.node.sizes}{parameter for Seurat function FindClusters.Parameters to pass to the Python leidenalg function.}

\item{cluster.algorithm}{parameter for Seurat function FindClusters.Algorithm for modularity optimization (1 = original Louvain algorithm; 2 = Louvain algorithm with multilevel refinement; 3 = SLM algorithm; 4 = Leiden algorithm). Leiden requires the leidenalg python.}

\item{cluster.n.start}{parameter for Seurat function FindClusters.Number of random starts.}

\item{cluster.n.iter}{parameter for Seurat function FindClusters.Maximal number of iterations per random start.}

\item{cluster.random.seed}{parameter for Seurat function FindClusters.Seed of the random number generator.}

\item{cluster.group.singletons}{parameter for Seurat function FindClusters.Group singletons into nearest cluster. If FALSE, assign all singletons to a "singleton" group}

\item{cluster.temp.file.location}{parameter for Seurat function FindClusters.Directory where intermediate files will be written. Specify the ABSOLUTE path.}

\item{cluster.edge.file.name}{parameter for Seurat function FindClusters.Edge file to use as input for modularity optimizer jar.}
}
\description{
Run clustering method (implemented by Seurat package) to identify cell populations using cell-cell pairwise distances
}
